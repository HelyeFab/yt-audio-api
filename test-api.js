// Test script for YouTube content extraction API
const axios = require('axios');

// Configuration
const BASE_URL = process.env.API_URL || 'http://localhost:3000';

// Test videos with known Japanese captions
const TEST_VIDEOS = [
  {
    name: 'Japanese lesson video',
    url: 'https://www.youtube.com/watch?v=0PgvOmbhfRY',
    hasJapaneseCaptions: true
  },
  {
    name: 'Japanese news',
    url: 'https://www.youtube.com/watch?v=coYw-eVU0Ks',
    hasJapaneseCaptions: true
  },
  {
    name: 'English video (no Japanese captions)',
    url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
    hasJapaneseCaptions: false
  }
];

async function testEndpoint(endpoint, data) {
  console.log(`\nüìã Testing ${endpoint}...`);
  console.log('Request:', JSON.stringify(data, null, 2));
  
  try {
    const response = await axios.post(`${BASE_URL}${endpoint}`, data, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    console.log('‚úÖ Success!');
    console.log('Response summary:', {
      success: response.data.success,
      method: response.data.method,
      transcriptCount: response.data.transcript?.length || 0,
      language: response.data.language,
      isAutoGenerated: response.data.isAutoGenerated,
      methods: response.data.methods
    });
    
    // Show first transcript line if available
    if (response.data.transcript && response.data.transcript[0]) {
      console.log('First line:', response.data.transcript[0].text);
    }
    
    return response.data;
  } catch (error) {
    console.log('‚ùå Error:', error.response?.data || error.message);
    return null;
  }
}

async function runTests() {
  console.log('üöÄ YouTube Content Extraction API Test Suite');
  console.log('Base URL:', BASE_URL);
  console.log('==========================================');
  
  // Test 1: Health check
  console.log('\nüìã Testing health check...');
  try {
    const health = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Server is running:', health.data);
  } catch (error) {
    console.log('‚ùå Server is not responding');
    return;
  }
  
  // Test 2: Unified content extraction endpoint
  console.log('\n\nüîç Testing unified content extraction endpoint');
  console.log('==============================================');
  
  for (const video of TEST_VIDEOS) {
    console.log(`\nüé¨ Testing: ${video.name}`);
    console.log(`URL: ${video.url}`);
    console.log(`Expected Japanese captions: ${video.hasJapaneseCaptions ? 'Yes' : 'No'}`);
    
    const result = await testEndpoint('/extract-youtube-content', {
      url: video.url,
      preferCaptions: true
    });
    
    if (result) {
      if (video.hasJapaneseCaptions && !result.success) {
        console.log('‚ö†Ô∏è  WARNING: Expected to find Japanese captions but none were found');
      } else if (!video.hasJapaneseCaptions && result.success) {
        console.log('‚ö†Ô∏è  WARNING: Found Japanese captions when none were expected');
      }
    }
    
    // Add delay between requests
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // Test 3: Direct subtitle extraction
  console.log('\n\nüîç Testing direct subtitle extraction');
  console.log('=====================================');
  
  await testEndpoint('/extract-youtube-subtitles', {
    url: TEST_VIDEOS[0].url
  });
  
  // Test 4: Audio transcription (with sample audio)
  console.log('\n\nüîç Testing audio transcription');
  console.log('==============================');
  
  await testEndpoint('/transcribe-audio', {
    audioUrl: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',
    language: 'en' // Testing with English audio
  });
  
  console.log('\n\n‚úÖ All tests completed!');
  console.log('\nNext steps:');
  console.log('1. Deploy to Render: git push origin main');
  console.log('2. Set OPENAI_API_KEY in Render environment variables');
  console.log('3. Test with production URL');
  console.log('4. Update frontend NEXT_PUBLIC_BACKEND_URL if needed');
}

// Run tests
runTests().catch(console.error);